@page "/login"

@using Microsoft.AspNetCore.Components.Authorization
@using WebAssemblyApp.Client.Models.Filters
@using WebAssemblyApp.Client.Services
@using WebAssemblyApp.Shared.ViewModel

@inject IJSRuntime jsRuntime;
@inject AuthenticationStateProvider authProvider;
@inject NavigationManager navigationManager;

@inject IHttpClientFactory httpClientFactory;

@implements IDisposable

@code {

}

<EditForm Model="@UserInfoData">
	<DataAnnotationsValidator />
	<ValidationSummary />
	<table class="container">
		<tr class="row">
			<td class="col-sm-2"><label class="form-label">UserName :</label></td>
			<td class="col-sm-4">
				<InputText class="form-control" @bind-Value="UserInfoData.UserName" />
				<ValidationMessage For="(()=> UserInfoData.UserName)" />
		    </td>			
		</tr>
		<br />
		<tr class="row">
			<td class="col-sm-2"><label class="form-label">Password :</label></td>
			<td class="col-sm-4">
				<InputText class="form-control" @bind-Value="UserInfoData.Password" type="password"></InputText>
				<ValidationMessage For="(()=> UserInfoData.Password)" />
			</td>

		</tr>
		<br/>
		<tr class="row">
			<td class="col-sm-2"></td>
			<td class="col-sm-4">
				<button type="submit" @onclick="Authenticate" class="btn btn-sm btn-success">Login</button>
				<button type="reset" class="btn btn-sm btn-primary">Cancel</button>
			</td>
		</tr>
	</table>
</EditForm>

@code {

	private LoginModel UserInfoData { get; set; } = new LoginModel();

	private JsConsole jsConsole = null;

	private HttpClient client;

	protected override async Task OnInitializedAsync()
	{
		client = this.httpClientFactory.CreateClient("api");
		this.jsConsole = new JsConsole(this.jsRuntime);
	}

	private async Task Authenticate()
	{

		var response = await client.PostAsJsonAsync<LoginModel>("/Login/signin", UserInfoData);

		try
		{
			if (response.IsSuccessStatusCode)
			{				
				var sessionToken = await response.Content.ReadFromJsonAsync<UserInfoObject>();				
				await ((BlazorAuthenticationStateProvider)authProvider).UpdateAuthentication(sessionToken);				
				navigationManager.NavigateTo("/fetchdata");
			}
			else
			{
				navigationManager.NavigateTo("/");
			}
		}
		catch(Exception ex)
		{
			await jsConsole.Log(ex.Message);
			navigationManager.NavigateTo("/");
		}		
	}

	public void Dispose()
	{
		client.Dispose();
	}
}