@page "/book"

@using Microsoft.AspNetCore.Authorization
@using Microsoft.AspNetCore.Components.Authorization
@using WebAssemblyApp.Client.Models
@using WebAssemblyApp.Client.Services
@using WebAssemblyApp.Shared
        
@inject NavigationManager navigationManager;
@inject IHttpClientFactory httpClientFactory;
@inject AuthenticationStateProvider authProvider;
@inject IJsConsole jsConsole;

@attribute [Authorize(Roles="User,Admin")]

@implements IDisposable

@{
	@if (Books == null)
	{
		<p>Loading Books .....</p>
	}
	else
	{
		<button class="btn btn-primary" @onclick="AddBook">Add Book</button>

		<br />
		<table class="table table-striped">
			<thead>
				<tr>
					<th scope="col">Title</th>
					<th scope="col">Description</th>
					<th scope="col">Author Name</th>
					<th scope="col">Actions</th>
				</tr>
			</thead>

			@foreach (var item in Books)
			{
				<tr>
					<td>@item.Title</td>
					<td>@item.Description</td>
					<td>@item.AuthorName</td>
					<td>
						<EditForm Model="@item" style="display:inline-block">
							<button class="btn btn-primary" @onclick="@(x=>this.EditBookData(item.Id))">Edit</button>
						</EditForm>
						<AuthorizeView Roles="Admin">
							<Authorized>
								<DeleteBook style="display:inline-block" Book="@item" DeleteCallback="DeleteData">
									<PopupHeader>
										<p>Delete Book</p>
									</PopupHeader>
									<PopupMessage>
										<p>Do you want to remove book @item.Title</p>
									</PopupMessage>
								</DeleteBook>
							</Authorized>
						</AuthorizeView>
					</td>
				</tr>
			}
		</table>

	}
	<ModelPopup @ref="modelObj" ConfirmCallback="ModalCallbackMethod"></ModelPopup>
}

@code {

	private HttpClient client;

	private IEnumerable<BookModel> Books { get; set; }

	private ModelPopup modelObj { get; set; }

	protected override Task OnInitializedAsync()
	{
		client = httpClientFactory.CreateClient("api");
		LoadData();
		return base.OnInitializedAsync();
	}

	private async Task LoadData()
	{
		try
		{
			var provider = (WebAssemblyApp.Client.Models.Filters.BlazorAuthenticationStateProvider)authProvider;


			var result = await client.GetFromJsonAsync<List<BookModel>>("/Book/GetBooks");

			this.Books = result ?? new List<BookModel>();

			await InvokeAsync(() =>
			{
				StateHasChanged();
			});
		}
		catch (Exception ex)
		{
			await jsConsole.Log(ex.Message);
		}
	}

	private void AddBook()
	{
		navigationManager.NavigateTo("/book/addbook");
	}

	private void EditBookData(int id)
	{
		this.navigationManager.NavigateTo($"/book/edit/{id}");
	}

	private void DeleteData<T>(DeleteModel<T> bookModal)
	{
		this.modelObj.ShowModal(bookModal.Model, bookModal.PopupHeader, bookModal.PopupMessage);
	}

	private async Task ModalCallbackMethod(ModalObj obj)
	{
		if (obj.IsConfirm)
		{
			BookModel bookObj = obj.Data as BookModel;
			if (bookObj != null)
			{
				var provider = (WebAssemblyApp.Client.Models.Filters.BlazorAuthenticationStateProvider)authProvider;
				await jsConsole.Log(bookObj);

				var result = await client.PostAsJsonAsync<BookModel>("/Book/DeleteBook", bookObj);

				if (result.IsSuccessStatusCode)
				{
					await LoadData();
				}
				else
				{
					await jsConsole.Log("request failed while delete");
				}
			}

		}
	}

	public void Dispose()
	{
		client.Dispose();
	}
}
